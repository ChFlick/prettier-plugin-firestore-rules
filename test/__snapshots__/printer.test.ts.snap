// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`the parser can format &&/|| connected conditions 1`] = `
"rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow write, read:
      if request.resource.data.asdf is int
        && request.resource.data.asdf == 333
        || abcdef == 22;
    }
  }
}"
`;

exports[`the parser can format an is condition 1`] = `
"rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow write, read: if request.resource.data.asdf is int;
    }
  }
}"
`;

exports[`the parser can format basic rules 1`] = `
"rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
  }
}"
`;

exports[`the parser can format comments behind the rules version 1`] = `
"rules_version = '2'; // this is a comment
service cloud.firestore {
  function test() {
    let x = true;
    return x;
  }
}"
`;

exports[`the parser can format let inside functions 1`] = `
"rules_version = '2';
service cloud.firestore {
  function test() {
    let x = true;
    return x;
  }
}"
`;

exports[`the parser can format more complex rules 1`] = `
"rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function hasValue(value, uid, carId) {
      return get(/databases/$(database)/documents/someData/$(uid)/subCollection/$(carId)).data.someData.hasAll([value]);
    }
    match /someData/{targetUserId} {
      allow write, read: if false;
      allow read: if request.auth.uid == targetUserId;
      match /subCollection/{carId} {
        allow read: if hasValue('bla', request.auth.uid, carId);
        allow update: if false;
      }
    }
    match /users/{userId} {
      allow write, read: if false;
    }
    match /cars/{carId} {
      match /roles/{roleId} {
        allow delete:
        if get(/databases/$(database)/documents/configurations/someData).data.values.hasAll(request.resource.data.someData)
          && request.resource.data.keys().hasOnly(['name', 'someData'])
          && request.resource.data.size() == 2
          && request.resource.data.name is string
          && request.resource.data.someData is list
          && hasValue('bla', request.auth.uid, carId);
        allow read: if hasValue('bla', request.auth.uid, carId);
      }
      match /oneLevel/{one} {
        match /twoLevel/{two} {
          match /threeLevel/{three} {
            allow write, read:
            if request.resource.data.asdf is int
              && request.resource.data.asdf == 333;
          }
        }
      }
      match /store/current/{doc=**} {
        allow read: if request.auth.uid != null;
        match /slots/{slotId} {
          allow write:
          if hasValue('writeSLots', request.auth.uid, carId)
            && request.resource.data.keys().hasOnly(['rank', 'name', 'description', 'imageUrl', 'timeSlot'])
            && request.resource.data.rank is int
            && request.resource.data.name is string
            && request.resource.data.description is string
            && request.resource.data.imageUrl is path
            && request.resource.data.timeSlot.from is timestamp
            && request.resource.data.timeSlot.to is timestamp
            && request.resource.data.timeSlot.to > request.resource.data.timeSlot.from;
        }
      }
    }
  }
}"
`;

exports[`the parser can format root-level functions 1`] = `
"rules_version = '2';
function test() {
  return true;
}
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow write, read: if true;
    }
  }
}
function test2() {
  return false;
}"
`;

exports[`the parser can format service-level functions 1`] = `
"rules_version = '2';
service cloud.firestore {
  function test() {
    return true;
  }
  match /databases/{database}/documents {
    match /{document=**} {
      allow write, read: if true;
    }
  }
  function test2() {
    return false;
  }
}"
`;

exports[`the parser can format the example rules 1`] = `
"// Top rule
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function hasValue(value, uid, carId) {
      return
      get(
      /databases/$(database)/documents/someData/$(uid)/subCollection/$(carId)
      ).data.someData.hasAll([value]);
    }
    match /someData/{targetUserId} {
      allow write: if false;
      allow read: if request.auth.uid == targetUserId;
      match /subCollection/{carId} {
        allow read: if hasValue('bla', request.auth.uid, carId);
        allow update: if false;
        // another comment
      }
    }
    match /users/{userId} {
      allow write, read: if false;
    }
    match /cars/{carId} {
      match /roles/{roleId} {
        allow delete:
        if get(
          /databases/$(database)/documents/configurations/someData
          ).data.values.hasAll(request.resource.data.someData)
          && request.resource.data.keys().hasOnly(['name', 'someData'])
          && request.resource.data.size() == 2
          && request.resource.data.name is string
          && request.resource.data.someData is list
          && hasValue('bla', request.auth.uid, carId);
        allow read: if hasValue('bla', request.auth.uid, carId);
      }
      match /oneLevel/{one} {
        match /twoLevel/{two} {
          match /threeLevel/{three} {
            allow write, read:
            if request.resource.data.asdf is int
              && request.resource.data.asdf == 333;
          }
        }
      }
      match /store/current/{doc=**} {
        allow read: if request.auth.uid != null;
        match /slots/{slotId} {
          allow write:
          if hasValue('writeSLots', request.auth.uid, carId)
            && request.resource.data.keys().hasOnly(
            ['rank', 'name', 'description', 'imageUrl', 'timeSlot']
            )

            && request.resource.data.rank is int
            && request.resource.data.name is string
            && request.resource.data.description is string
            && request.resource.data.imageUrl is path
            && request.resource.data.timeSlot.from is timestamp
            && request.resource.data.timeSlot.to is timestamp
            && request.resource.data.timeSlot.to > request.resource.data.timeSlot.from
            ;
        }
      }
    }
  }
}"
`;
